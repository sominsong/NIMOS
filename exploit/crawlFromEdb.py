import json
import subprocess

PERM_OUTPUT_PATH = "/opt/output/perm/"
EXPLOITDB_PATH = "./exploit/exploit-db/"
SEARCHSPLOIT_PATH = "/opt/exploitdb/"

def parsing_kernel_version(desc):
    descList = desc.split()
    if "Kernel" in descList:
        kIdx = descList.index("Kernel")
    elif "kernel" in descList:
        kIdx = descList.index("kernel")

    if "<" in descList:
        if descList.index("<") == kIdx + 1 or descList.index("<") == kIdx + 2:  # filetering other position of '<'
            if descList.index("<") == 2:    # Linux Kernel < x.x.x
                version = ' '.join(descList[kIdx+1:kIdx+3])
            else:                           # Linux Kernel x.x.x < x.x.x
                version = ' '.join(descList[kIdx+1:kIdx+4])
        else:   # no '<'
            version = descList[kIdx+1]
    else:   # no '<'
        version = descList[kIdx+1]

    return version

def search_from_exploitdb():
    # search "linux kernel", "privilege escalation" keyword in Description and "local" in Type 
    cmd = f'cat {SEARCHSPLOIT_PATH}files_exploits.csv | grep -i "Linux Kernel" | grep -i "Privilege Escalation" | grep -i ",local"'
    searchsploit_result = subprocess.check_output(cmd,shell=True).decode().strip("\n").split('\n')
    searchsploit_result = list(map(lambda x: x.split(','), searchsploit_result))

    exploitJson = {"EID":"", "publish":"", "CVE-ID":"", "src":"", "url":"", "CVSS":{"CVSSv2":"","CVSSv3":""}, "kernel version":""}
    jsonList = list()
    with open(f'{PERM_OUTPUT_PATH}exploit.json','w+') as f:
        for i, result in enumerate(searchsploit_result):
            exploitJson["EID"]             = result[0]
            exploitJson["src"]             = "exploitdb"
            exploitJson["url"]             = "exploit-db.com/exploits/"+result[0]
            exploitJson["kernel version"]  = parsing_kernel_version(result[2])
            exploitJson = {"EID":"", "publish":"", "CVE-ID":"", "src":"", "url":"", "CVSS":{"CVSSv2":"","CVSSv3":""}, "kernel version":""}
            jsonList.append(exploitJson)
        jsonStr = json.dumps(jsonList)
        f.write(jsonStr)
        f.close()

if __name__ == "__main__":
    search_from_exploitdb()