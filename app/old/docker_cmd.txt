# -------<컨테이너 실행>-------

# 1) mongodb

# 1-1) mongodb docker volume 설정
$ mkdir -p /data/mongo/db-01
$ mkdir -p /data/mongo/db-02
$ mkdir -p /data/mongo/db-03

# 1-2) mongodb 컨테이너 생성
# docker [command] [-d: detach 모드] [-p: 포트 바인딩] [-v: 볼륨 연결] [--name: 컨테이너 이름] [--net: 도커 네트워크 이름] [이미지:버전]
# mongod [--replSet: Replica Set 이름][--dbpath: 데이터베이스 경로]
$ docker run -d -p 30001:27017 -v /data/mongo/db-01:/data/db --name mongodb-container1 --net mongo-cluster mongo\
  mongod --replSet mongo-repl --dbpath /data/db 
$ docker run -d -p 30002:27017 -v /data/mongo/db-02:/data/db --name mongodb-container2 --net mongo-cluster mongo mongod --replSet mongo-repl --dbpath /data/db
$ docker run -d -p 30003:27017 -v /data/mongo/db-03:/data/db --name mongodb-container3 --net mongo-cluster mongo mongod --replSet mongo-repl --dbpath /data/db

# 1-3) container1의 mongodb 컨테이너 접속해서 mongo 명령어 실행
$ docker exec -it mongodb-container1 mongo

# 1-4) 이 후 Primary-Secondary 설정 및 Replica Set 설정 (db 이름: ycsb)
# https://code-machina.github.io/2019/07/17/Mongo-and-Docker-Part-1.html#section-1 사이트 참고


# 2) apache

# 2-1) Dockerfile 경로에서 myhttpd 이미지 생성
$ docker build -t myhttpd .

# 2-2)방금 만든 myhttpd 이미지를 통해 httpd 컨테이너 실행
$ docker run -d --name httpd-container -p 8009:80 myhttpd


# 3) nginx

# 3-1) nginx index.html 만들기
$ vi /data/nginx/html/index.html

# 3-2) nginx 컨테이너 실행
$ docker run --name nginx-container -v /data/nginx/html:/usr/share/nginx/html -d -p 8009:80 nginx:latest


# -------<shell script 실행 순서>-------

# 젤 먼저, docker 하나만 띄워놓고 ftrace 설정 setup
$ bash trace_setup.sh


# 1) mongodb

# 1-1) 워크로드 데이터 로드
$ bash ycsb.sh load workload_number(a/b/c/d/e/f)

# 1-2) tracing 및 워크로드 run
$ bash mongo_tracing.sh ${workload_number} ${output_filename}


# 2) httpd

# 2-1) 서버 상태 확인
$ curl ${ip}:${port}

# 2-2) tracing 및 benchmark 실행
$ bash httpd_tracing.sh ${METHOD}


# 3) nginx

# 3-1) 서버 상태 확인
$ curl ${ip}:${port}

# 3-2) tracing 및 benchmark 실행
$ bash nginx_tracing.sh ${METHOD}

